name: Kotlin Todo API CI/CD

# Commented out triggers to prevent automatic runs until secrets are configured
# Uncomment these when you're ready to enable the pipeline
on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:  # Only manual triggers enabled for now

# Note: For better security, consider using Workload Identity Federation
# instead of service account keys: https://github.com/google-github-actions/auth#setup

env:
  PROJECT_ID: kotlin-todo-api-project
  SERVICE_NAME: kotlin-todo-api
  REGION: us-central1

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper checkout
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: build/libs/*.jar
        retention-days: 1

  deploy:
    name: Deploy to Google Cloud Run
    needs: build
    if: success() || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: build/libs/
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Build and push Docker image
      run: |
        # Submit the build asynchronously to get the BUILD_ID without waiting for logs to stream
        # The --timeout=30m flag sets the server-side timeout for the build itself.
        BUILD_ID=$(gcloud builds submit --quiet --async --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA --timeout=30m --format="value(id)")

        if [ -z "$BUILD_ID" ]; then
          echo "Failed to submit build or retrieve BUILD_ID."
          exit 1
        fi
        echo "Build submitted successfully. BUILD_ID: $BUILD_ID"
        echo "View build logs at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
        echo "You can also stream logs locally using: gcloud builds log $BUILD_ID --project $PROJECT_ID"

        # Poll for build completion
        # Client-side timeout for this polling loop (e.g., 35 minutes, slightly more than the build's server-side timeout)
        CLIENT_TIMEOUT_SECONDS=$((35 * 60)) 
        POLL_INTERVAL_SECONDS=30
        ELAPSED_TIME=0

        while true; do
          STATUS=$(gcloud builds describe $BUILD_ID --project $PROJECT_ID --format="value(status)")
          echo "Current build status for $BUILD_ID: $STATUS"

          if [ "$STATUS" = "SUCCESS" ]; then
            echo "Build $BUILD_ID completed successfully."
            break
          elif [ "$STATUS" = "FAILURE" ] || [ "$STATUS" = "INTERNAL_ERROR" ] || [ "$STATUS" = "TIMEOUT" ] || [ "$STATUS" = "CANCELLED" ]; then
            echo "Build $BUILD_ID failed with status: $STATUS"
            echo "Attempting to fetch last 50 lines of build log:"
            gcloud builds log $BUILD_ID --project $PROJECT_ID --limit=50 || echo "Could not fetch build logs for $BUILD_ID."
            exit 1
          fi

          if [ "$ELAPSED_TIME" -ge "$CLIENT_TIMEOUT_SECONDS" ]; then
            echo "Client-side timeout waiting for build $BUILD_ID to complete (elapsed: $ELAPSED_TIME seconds)."
            gcloud builds log $BUILD_ID --project $PROJECT_ID --limit=50 || echo "Could not fetch build logs for timed-out build $BUILD_ID."
            exit 1
          fi
          sleep $POLL_INTERVAL_SECONDS
          ELAPSED_TIME=$((ELAPSED_TIME + POLL_INTERVAL_SECONDS))
        done
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        flags: --allow-unauthenticated
        env_vars: |
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
